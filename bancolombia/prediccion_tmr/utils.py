def train_model(df):
    """
    The function `train_model` uses the Prophet library to train a time series forecasting model on the
    input DataFrame `df` and returns the forecast for future periods.
    
    :param df: The `df` parameter in the `train_model` function is a pandas DataFrame that contains
    historical data with columns 'VIGENCIADESDE' and 'VALOR'. The 'VIGENCIADESDE' column represents the
    date and 'VALOR' column represents the value that you want
    :return: The function `train_model` is returning the forecast generated by the Prophet model for the
    input dataframe `df`.
    """
    from prophet import Prophet
    import pandas as pd
    
    df["VIGENCIADESDE"] = pd.to_datetime(df['VIGENCIADESDE'], dayfirst=True)
    
    df.rename(columns={'VIGENCIADESDE': 'ds', 'VALOR': 'y'}, inplace=True)

    model = Prophet()
    model.fit(df)

    future = model.make_future_dataframe(periods=30) 
    forecast = model.predict(future)

    return forecast

def generate_plots(forecast):
    """
    The function `generate_plots` generates a line plot of forecasted values for the next month and
    returns it as HTML code with a base64 encoded image.
    
    :param forecast: The `generate_plots` function takes a forecast DataFrame as input and generates a
    line plot using Seaborn and Matplotlib for the last month's data in the forecast. The plot shows the
    predicted values for the next month
    :return: The `generate_plots` function returns an HTML code that includes an image of the forecast
    plot generated using the Seaborn library. The image is encoded in base64 format and embedded in the
    HTML code as a data URI.
    """
    import base64
    from io import BytesIO
    import seaborn as sns
    import matplotlib.pyplot as plt
    from datetime import timedelta

    buffer = BytesIO()
    
    data_last_month = forecast[forecast['ds'] >= (forecast['ds'].max() - timedelta(days=30))]
    
    plt.figure(figsize=(15,6))
    ax = sns.lineplot(data_last_month, x="ds", y="yhat")
    ax.set(xlabel='Dia', ylabel='Valor Dolar', title="Predicci√≥n TRM del dolar para el proximo mes")
    sns_figure = ax.get_figure()
    
    sns_figure.savefig(buffer, format='png')
    
    buffer.seek(0)

    image_base64 = base64.b64encode(buffer.getvalue()).decode()

    html_code = f'<img src="data:image/png;base64,{image_base64}" alt="Forecast Components">'
    return html_code