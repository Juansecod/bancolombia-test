from django.test import TestCase
import pandas as pd
from datetime import datetime, timedelta
from prediccion_tmr.utils import train_model, generate_plots  

class TestUtilities(TestCase):
    def setUp(self):
        # Create a df to test the utilities
        self.df = pd.DataFrame({
            'VIGENCIADESDE': pd.date_range(start="2023-01-01", periods=100, freq='D'),
            'VALOR': range(100)
        })

    def test_train_model(self):
        """
        The `test_train_model` function checks if the forecast generated by the `train_model` function
        contains the expected columns and includes future dates.
        """
        forecast = train_model(self.df, periods=30)
        
        expected_columns = ['ds', 'yhat', 'yhat_lower', 'yhat_upper']
        for col in expected_columns:
            self.assertIn(col, forecast.columns, f"Column '{col}' is missing in the forecast.")
            
        max_date_original = self.df['ds'].max()
        max_date_forecast = forecast['ds'].max()
        self.assertTrue(max_date_forecast > max_date_original, "Forecast does not include future dates.")

    def test_generate_plots(self):
        """
        The function `test_generate_plots` tests the output of the `generate_plots` function for
        specific conditions in a Python test case.
        """
        forecast = train_model(self.df, periods=30)
        html_code = generate_plots(forecast, freq=30)

        self.assertIsInstance(html_code, str, "The output of generate_plots is not a string.")
        self.assertIn('<img', html_code, "The output HTML does not contain an <img> tag.")
        self.assertIn('data:image/png;base64,', html_code, "The output HTML does not contain a base64 image.")